//HintName: DiscriminatedUnionGenerator.g.cs
// <auto-generated/>
#nullable enable

namespace Funcky.DiscriminatedUnion.Test.Sources
{
    partial record UnionWithPartitionUsage
    {
        [global::System.CodeDom.Compiler.GeneratedCode("Funcky.DiscriminatedUnion.SourceGeneration", "1.2.0.0")]
        public abstract TResult Match<TResult>(global::System.Func<Success, TResult> success, global::System.Func<Warning, TResult> warning, global::System.Func<Error, TResult> error);
        
        [global::System.CodeDom.Compiler.GeneratedCode("Funcky.DiscriminatedUnion.SourceGeneration", "1.2.0.0")]
        public abstract void Switch(global::System.Action<Success> success, global::System.Action<Warning> warning, global::System.Action<Error> error);
        
        partial record Success
        {
            [global::System.CodeDom.Compiler.GeneratedCode("Funcky.DiscriminatedUnion.SourceGeneration", "1.2.0.0")]
            public override TResult Match<TResult>(global::System.Func<Success, TResult> success, global::System.Func<Warning, TResult> warning, global::System.Func<Error, TResult> error) => success(this);
            
            [global::System.CodeDom.Compiler.GeneratedCode("Funcky.DiscriminatedUnion.SourceGeneration", "1.2.0.0")]
            public override void Switch(global::System.Action<Success> success, global::System.Action<Warning> warning, global::System.Action<Error> error) => success(this);
        }
        
        partial record Warning
        {
            [global::System.CodeDom.Compiler.GeneratedCode("Funcky.DiscriminatedUnion.SourceGeneration", "1.2.0.0")]
            public override TResult Match<TResult>(global::System.Func<Success, TResult> success, global::System.Func<Warning, TResult> warning, global::System.Func<Error, TResult> error) => warning(this);
            
            [global::System.CodeDom.Compiler.GeneratedCode("Funcky.DiscriminatedUnion.SourceGeneration", "1.2.0.0")]
            public override void Switch(global::System.Action<Success> success, global::System.Action<Warning> warning, global::System.Action<Error> error) => warning(this);
        }
        
        partial record Error
        {
            [global::System.CodeDom.Compiler.GeneratedCode("Funcky.DiscriminatedUnion.SourceGeneration", "1.2.0.0")]
            public override TResult Match<TResult>(global::System.Func<Success, TResult> success, global::System.Func<Warning, TResult> warning, global::System.Func<Error, TResult> error) => error(this);
            
            [global::System.CodeDom.Compiler.GeneratedCode("Funcky.DiscriminatedUnion.SourceGeneration", "1.2.0.0")]
            public override void Switch(global::System.Action<Success> success, global::System.Action<Warning> warning, global::System.Action<Error> error) => error(this);
        }
    }
    
    public static class UnionWithPartitionUsageEnumerableExtensions
    {
        public record struct Partitions(System.Collections.Generic.IReadOnlyList<UnionWithPartitionUsage.Success> success, System.Collections.Generic.IReadOnlyList<UnionWithPartitionUsage.Warning> warning, System.Collections.Generic.IReadOnlyList<UnionWithPartitionUsage.Error> error);
        
        public static Partitions Partition(this System.Collections.Generic.IEnumerable<UnionWithPartitionUsage> source)
        {
            var successItems = System.Collections.Immutable.ImmutableList.CreateBuilder<UnionWithPartitionUsage.Success>();
            var warningItems = System.Collections.Immutable.ImmutableList.CreateBuilder<UnionWithPartitionUsage.Warning>();
            var errorItems = System.Collections.Immutable.ImmutableList.CreateBuilder<UnionWithPartitionUsage.Error>();
            foreach (var item in source)
            {
                item.Switch(success: successItems.Add, warning: warningItems.Add, error: errorItems.Add);
            }
            return new(successItems.ToImmutable(), warningItems.ToImmutable(), errorItems.ToImmutable());
        }
    }
}
